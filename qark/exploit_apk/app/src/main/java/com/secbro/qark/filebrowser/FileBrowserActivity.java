/*
 *
 * Reference: https://github.com/vaal12/AndroidFileBrowser by Alexey Vassiliev
 *
 */

 package com.secbro.qark.filebrowser;

 import java.io.File;
 import java.io.FilenameFilter;
 import java.util.ArrayList;
 import java.util.Comparator;
 import java.util.List;
 import java.util.Collections;
 
 // Android imports
 import android.content.Intent;
 import android.content.res.Configuration;
 import android.graphics.Color;
 import android.os.Bundle;
 import android.os.Environment;
 import android.os.StatFs;
 import android.util.Log;
 import android.view.View;
 import android.widget.*;
 
 import androidx.appcompat.app.AppCompatActivity; // Migrated to AndroidX
 
 import com.secbro.qark.R;
 
 public class FileBrowserActivity extends AppCompatActivity {
 
     // Intent Action Constants
     public static final String INTENT_ACTION_SELECT_DIR = "ua.com.vassiliev.androidfilebrowser.SELECT_DIRECTORY_ACTION";
     public static final String INTENT_ACTION_SELECT_FILE = "ua.com.vassiliev.androidfilebrowser.SELECT_FILE_ACTION";
 
     // Intent parameters names constants
     public static final String startDirectoryParameter = "ua.com.vassiliev.androidfilebrowser.directoryPath";
     public static final String returnDirectoryParameter = "ua.com.vassiliev.androidfilebrowser.directoryPathRet";
     public static final String returnFileParameter = "ua.com.vassiliev.androidfilebrowser.filePathRet";
     public static final String showCannotReadParameter = "ua.com.vassiliev.androidfilebrowser.showCannotRead";
     public static final String filterExtension = "ua.com.vassiliev.androidfilebrowser.filterExtension";
 
     // Stores names of traversed directories
     private ArrayList<String> pathDirsList = new ArrayList<>();
 
     private static final String LOGTAG = "F_PATH";
 
     private List<Item> fileList = new ArrayList<>();
     private File path = null;
     private String chosenFile;
     private ArrayAdapter<Item> adapter;
 
     private boolean showHiddenFilesAndDirs = true;
     private boolean directoryShownIsEmpty = false;
     private String filterFileExtension = null;
 
     // Action constants
     private static int currentAction = -1;
     private static final int SELECT_DIRECTORY = 1;
     private static final int SELECT_FILE = 2;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
         setContentView(R.layout.activity_file_browser);
 
         // Set action for this activity
         Intent intent = getIntent();
         currentAction = intent.getAction().equalsIgnoreCase(INTENT_ACTION_SELECT_FILE)
                 ? SELECT_FILE : SELECT_DIRECTORY;
         
         Log.d(LOGTAG, "SELECT ACTION: " + (currentAction == SELECT_FILE ? "SELECT FILE" : "SELECT DIRECTORY"));
 
         showHiddenFilesAndDirs = intent.getBooleanExtra(showCannotReadParameter, true);
         filterFileExtension = intent.getStringExtra(filterExtension);
 
         setInitialDirectory();
         parseDirectoryPath();
         loadFileList();
         createFileListAdapter();
         initializeButtons();
         initializeFileListView();
         updateCurrentDirectoryTextView();
 
         Log.d(LOGTAG, path.getAbsolutePath());
     }
 
     private void setInitialDirectory() {
         String requestedStartDir = getIntent().getStringExtra(startDirectoryParameter);
 
         if (requestedStartDir != null && !requestedStartDir.isEmpty()) {
             File tempFile = new File(requestedStartDir);
             if (tempFile.isDirectory()) {
                 this.path = tempFile;
             }
         }
 
         if (this.path == null) {
             this.path = Environment.getExternalStorageDirectory().isDirectory()
                     && Environment.getExternalStorageDirectory().canRead()
                     ? Environment.getExternalStorageDirectory()
                     : new File("/");
         }
     }
 
     private void parseDirectoryPath() {
         pathDirsList.clear();
         String[] parts = path.getAbsolutePath().split("/");
         Collections.addAll(pathDirsList, parts);
     }
 
     private void initializeButtons() {
         Button upDirButton = findViewById(R.id.upDirectoryButton);
         upDirButton.setOnClickListener(v -> {
             Log.d(LOGTAG, "Up Directory Button Clicked");
             loadDirectoryUp();
             loadFileList();
             adapter.notifyDataSetChanged();
             updateCurrentDirectoryTextView();
         });
 
         Button selectFolderButton = findViewById(R.id.selectCurrentDirectoryButton);
         if (currentAction == SELECT_DIRECTORY) {
             selectFolderButton.setOnClickListener(v -> {
                 Log.d(LOGTAG, "Select Folder Button Clicked");
                 returnDirectoryFinishActivity();
             });
         } else {
             selectFolderButton.setVisibility(View.GONE);
         }
     }
 
     private void loadDirectoryUp() {
         if (!pathDirsList.isEmpty()) {
             String removedDir = pathDirsList.remove(pathDirsList.size() - 1);
             path = new File(path.toString().replace("/" + removedDir, ""));
         }
         fileList.clear();
     }
 
     private void updateCurrentDirectoryTextView() {
         String curDirString = String.join("/", pathDirsList) + "/";
         long freeSpace = getFreeSpace(curDirString);
         String formattedSpaceString = formatBytes(freeSpace);
 
         if (freeSpace == 0 && !new File(curDirString).canWrite()) {
             formattedSpaceString = "NON Writable";
         }
 
         findViewById(R.id.upDirectoryButton).setEnabled(!pathDirsList.isEmpty());
         ((Button) findViewById(R.id.selectCurrentDirectoryButton)).setText("Select\n[" + formattedSpaceString + "]");
         ((TextView) findViewById(R.id.currentDirectoryTextView)).setText("Current directory: " + curDirString);
     }
 
     private void showToast(String message) {
         Toast.makeText(this, message, Toast.LENGTH_LONG).show();
     }
 
     public static long getFreeSpace(String path) {
         StatFs stat = new StatFs(path);
         return (long) stat.getAvailableBlocks() * (long) stat.getBlockSize();
     }
 
     public static String formatBytes(long bytes) {
         if (bytes >= 1073741824) return (bytes / 1073741824) + " GB";
         if (bytes >= 1048576) return (bytes / 1048576) + " MB";
         if (bytes >= 1024) return (bytes / 1024) + " KB";
         return bytes + " bytes";
     }
 
     private class Item {
         public String file;
         public int icon;
         public boolean canRead;
 
         public Item(String file, Integer icon, boolean canRead) {
             this.file = file;
             this.icon = icon;
         }
 
         @Override
         public String toString() {
             return file;
         }
     }
 
     private class ItemFileNameComparator implements Comparator<Item> {
         public int compare(Item lhs, Item rhs) {
             return lhs.file.toLowerCase().compareTo(rhs.file.toLowerCase());
         }
     }
 }
 