/*
 * Copyright 2015 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

 package com.secbro.qark.webviewtests;

 import android.content.Context;
 import android.content.SharedPreferences;
 import android.os.Build;
 import android.os.Bundle;
 import android.util.Log;
 import android.webkit.WebChromeClient;
 import android.webkit.WebSettings;
 import android.webkit.WebView;
 import android.webkit.WebViewClient;
 
 import androidx.appcompat.app.AppCompatActivity; // Migrated to AndroidX
 
 import com.secbro.qark.R;
 
 public class WebViewTestsActivity extends AppCompatActivity {
 
     private static final String LOG_TAG = "QARK";
     private WebView webView;
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         Log.d(LOG_TAG, "Hit OnCreate");
         super.onCreate(savedInstanceState);
         setContentView(R.layout.webview);
 
         String browser = getIntent().getStringExtra(WebViewTestsActivityFragment.WEBVIEW_TEST_ID);
         String url = "http://www.secbro.com";
         int currentApiVersion = Build.VERSION.SDK_INT;
 
         // Create shared preferences for filesystem access
         createSharedPreferences();
 
         // Initialize WebView
         webView = findViewById(R.id.nav_web_view_tests);
         Log.d(LOG_TAG, "Set View");
 
         // Set appropriate WebView client
         if (browser.matches(".*_AOSP")) {
             Log.d(LOG_TAG, "Android Browser");
             webView.setWebViewClient(new WebViewClient());
         } else {
             Log.d(LOG_TAG, "Chrome Browser");
             webView.setWebChromeClient(new WebChromeClient());
         }
 
         // Disable JavaScript by default
         webView.getSettings().setJavaScriptEnabled(false);
         Log.d(LOG_TAG, "JavaScript disabled");
 
         // Determine the correct URL and settings based on the test
         configureWebView(browser, currentApiVersion);
 
         // Load the URL
         if (browser.matches("BU_.*")) {
             Log.d(LOG_TAG, "BU2");
             webView.getSettings().setJavaScriptEnabled(true);
             loadCustomHtmlWithBaseUrl();
         } else {
             webView.getSettings().setCacheMode(WebSettings.LOAD_NO_CACHE);
             webView.loadUrl(url);
         }
     }
 
     private void createSharedPreferences() {
         Log.d(LOG_TAG, "Started creating shared_prefs");
         final String qarkPrefs = "qarkPrefs";
         final String testKey = "secretPassword";
         final String testPassword = "You are seeing the contents of /data/data/com.secbro.qark/shared_prefs/qarkPrefs.xml";
 
         try {
             SharedPreferences sharedPreferences = getSharedPreferences(qarkPrefs, Context.MODE_PRIVATE);
             SharedPreferences.Editor editor = sharedPreferences.edit();
             editor.putString(testKey, testPassword);
             editor.apply(); // Changed from commit() to apply() for better performance
             Log.d(LOG_TAG, "Completed SharedPreference creation");
         } catch (Exception e) {
             Log.e(LOG_TAG, "Error creating shared preferences", e);
         }
     }
 
     private void configureWebView(String browser, int currentApiVersion) {
         String url = "http://www.secbro.com";
 
         if (browser.matches("JS_.*")) {
             Log.d(LOG_TAG, "JS Test");
             url = "http://secbro.com/qark/poc/JS_WARNING.html";
             webView.getSettings().setJavaScriptEnabled(true);
         } else if (browser.matches("FS_.*")) {
             if (currentApiVersion < Build.VERSION_CODES.KITKAT) {
                 Log.d(LOG_TAG, "FS Test");
                 webView.getSettings().setAllowFileAccess(true);
                 url = "file:////data/data/com.secbro.qark/shared_prefs/qarkPrefs.xml";
             } else {
                 url = "file:////data/data/com.secbro.qark/shared_prefs/qarkPrefs.xml";
             }
         } else if (browser.matches("BU_.*")) {
             Log.d(LOG_TAG, "BU Test");
             url = "http://secbro.com/qark/poc/BURL_WARNING.html";
         } else if (browser.matches("SOP_.*")) {
             url = (currentApiVersion < Build.VERSION_CODES.KITKAT)
                     ? "http://secbro.com/qark/poc/WEBVIEW_SOP_WARNING.html"
                     : "http://secbro.com/qark/poc/wrongVersion.html";
         } else if (browser.matches("IFRAME_.*")) {
             Log.d(LOG_TAG, "IFRAME Test");
             url = (currentApiVersion < Build.VERSION_CODES.KITKAT)
                     ? "http://secbro.com/qark/poc/WEBVIEW_SOP_WARNING_IFRAME.html"
                     : "http://secbro.com/qark/poc/wrongVersion.html";
         }
         webView.loadUrl(url);
     }
 
     private void loadCustomHtmlWithBaseUrl() {
         String contents = "<html>\n" +
                 "<head>\n" +
                 "</head>\n" +
                 "<body>\n" +
                 "<script>\n" +
                 "if(document.domain)\n" +
                 "{\n" +
                 "\tdocument.write(\"The base domain for this WebView is set to \" + document.domain);\n" +
                 "}\n" +
                 "else\n" +
                 "{\n" +
                 "\tdocument.write(\"<p style=\\\"color:black\\\">This file appears to be running in the <b>file</b> context, as document.domain is not set</p><br>\");\n" +
                 "\tdocument.write(\"<p style=\\\"color:black\\\">If the BaseURL were set, the document.domain would be set to its value</p>\")\n" +
                 "}\n" +
                 "</script>\n" +
                 "</body>\n" +
                 "</html>";
         webView.loadDataWithBaseURL("http://www.nsa.gov", contents, "text/html", "utf-8", "http://secbro.com/poc/fail.html");
     }
 }
 