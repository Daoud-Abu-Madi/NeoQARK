/*
 * Copyright 2015 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

 package com.secbro.qark.exportedcomponent.exportedreceiver;

 import android.content.Intent;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.Button;
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.TextView;
 import android.widget.Toast;
 
 import androidx.annotation.Nullable;
 import androidx.fragment.app.Fragment; // Migrated to AndroidX
 
 import com.secbro.qark.R;
 
 import java.util.ArrayList;
 
 public class IntentSenderFragment extends Fragment {
 
     private ArrayList<String> keys;
     private String exportedReceiverName;
     private String exportedReceiverId;
 
     /**
      * Mandatory empty constructor for the fragment manager to instantiate the
      * fragment (e.g., upon screen orientation changes).
      */
     public IntentSenderFragment() {
     }
 
     @Override
     public void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
         outState.putStringArrayList(IntentSenderActivity.INTENT_KEYS, keys);
         outState.putString(ExportedReceiverListFragment.EXPORTED_RECEIVER_NAME, exportedReceiverName);
         outState.putString(ExportedReceiverListFragment.EXPORTED_RECEIVER_ID, exportedReceiverId);
     }
 
     @Override
     public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {
         return inflater.inflate(R.layout.fragment_intent_sender, container, false);
     }
 
     @Override
     public void onActivityCreated(@Nullable Bundle savedInstanceState) {
         super.onActivityCreated(savedInstanceState);
         if (savedInstanceState != null) {
             keys = savedInstanceState.getStringArrayList(IntentSenderActivity.INTENT_KEYS);
             exportedReceiverName = savedInstanceState.getString(ExportedReceiverListFragment.EXPORTED_RECEIVER_NAME);
             exportedReceiverId = savedInstanceState.getString(ExportedReceiverListFragment.EXPORTED_RECEIVER_ID);
         } else {
             Bundle bundle = getArguments();
             if (bundle != null) {
                 keys = bundle.getStringArrayList(IntentSenderActivity.INTENT_KEYS);
                 exportedReceiverName = bundle.getString(ExportedReceiverListFragment.EXPORTED_RECEIVER_NAME);
                 exportedReceiverId = bundle.getString(ExportedReceiverListFragment.EXPORTED_RECEIVER_ID);
             }
         }
 
         if (keys == null || keys.isEmpty()) {
             Log.e("ERROR", "Keys are null or empty.");
             throw new IllegalArgumentException("Keys cannot be null or empty.");
         }
 
         LinearLayout paramsLayout = requireView().findViewById(R.id.paramsLayout);
 
         for (String key : keys) {
             createKeyValuePairLayout(key, paramsLayout);
         }
 
         Button button = requireView().findViewById(R.id.submitButton);
         button.setOnClickListener(v -> sendBroadcast());
     }
 
     private void sendBroadcast() {
         try {
             Intent intent = new Intent();
             intent.setAction(exportedReceiverName);
 
             if (!keys.isEmpty()) {
                 for (String key : keys) {
                     TextView keyTextView = requireView().findViewWithTag("key" + key);
                     EditText valueEditText = requireView().findViewWithTag("value" + key);
 
                     if (keyTextView != null && valueEditText != null) {
                         intent.putExtra(keyTextView.getText().toString(), valueEditText.getText().toString());
                     } else {
                         Log.e("ERROR", "Key or Value field is missing for: " + key);
                     }
                 }
             }
 
             requireActivity().sendBroadcast(intent);
             Toast.makeText(requireActivity(), "Intent sent", Toast.LENGTH_LONG).show();
         } catch (Exception e) {
             Log.e("ERROR", "Failed to send broadcast", e);
             Toast.makeText(requireActivity(), "Failed to send intent", Toast.LENGTH_LONG).show();
         }
     }
 
     private void createKeyValuePairLayout(String key, LinearLayout paramsLayout) {
         LinearLayout linearLayout = new LinearLayout(requireActivity());
         linearLayout.setOrientation(LinearLayout.HORIZONTAL);
 
         LinearLayout.LayoutParams llp = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);
         llp.setMargins(50, 10, 50, 10);
 
         TextView keyTextView = new TextView(requireActivity());
         keyTextView.setTag("key" + key);
         keyTextView.setText(key);
         keyTextView.setLayoutParams(llp);
 
         LinearLayout.LayoutParams llp1 = new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT, ViewGroup.LayoutParams.WRAP_CONTENT);
         EditText valueEditText = new EditText(requireActivity());
         valueEditText.setTag("value" + key);
         valueEditText.setLayoutParams(llp1);
 
         linearLayout.addView(keyTextView);
         linearLayout.addView(valueEditText);
         paramsLayout.addView(linearLayout);
     }
 }
 